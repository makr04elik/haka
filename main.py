import json
import requests
from pathlib import Path

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
OPENROUTER_API_KEY = "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"  # –≤–∞—à –∫–ª—é—á
API_URL = "https://openrouter.ai/api/v1/chat/completions"  # ‚Üê –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤!

# –ò—Å–ø–æ–ª—å–∑—É–µ–º Llama 3.2 3B Instruct (free)
MODEL = "meta-llama/llama-3.2-3b-instruct:free"

DATA_DIR = Path("data")

# === –§—É–Ω–∫—Ü–∏–∏ ===

def load_all_geojsons(directory: Path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã GeoJSON –∏–∑ –ø–∞–ø–∫–∏."""
    all_features = []
    for file in directory.glob("*.geojson"):
        try:
            with open(file, "r", encoding="utf-8") as f:
                data = json.load(f)
                if data.get("type") == "FeatureCollection":
                    all_features.extend(data.get("features", []))
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file.name}: {e}")
    return all_features


def find_road_segment(features, user_query):
    """–ò—â–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —É—á–∞—Å—Ç–æ–∫ –¥–æ—Ä–æ–≥–∏ –ø–æ —Ç–µ–∫—Å—Ç—É –∑–∞–ø—Ä–æ—Å–∞."""
    query_lower = user_query.lower()
    for feature in features:
        props = feature.get("properties", {})
        name = props.get("name", "").lower()
        segment = props.get("segment", "").lower()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏ –∏–º—è, –∏ —Å–µ–≥–º–µ–Ω—Ç —É–ø–æ–º—è–Ω—É—Ç—ã –≤ –∑–∞–ø—Ä–æ—Å–µ
        if name in query_lower and segment in query_lower:
            return props
    return None


def analyze_with_ai(user_query, road_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Llama 3.2 3B Instruct."""
    user_prompt = (
        "–¢—ã ‚Äî URBANAI ADVISOR, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é. "
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ—Ä–æ–∂–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ, –∏ –æ—Ñ–æ—Ä–º–∏ –æ—Ç—á—ë—Ç: "
        "–∞–Ω–∞–ª–∏–∑, –ø—Ä–∏—á–∏–Ω—ã, —Ä–µ—à–µ–Ω–∏—è, –ø—Ä–æ–≥–Ω–æ–∑—ã –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã.\n\n"
        f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_query}\n\n"
        f"–î–∞–Ω–Ω—ã–µ –æ–± —É—á–∞—Å—Ç–∫–µ:\n{json.dumps(road_data, ensure_ascii=False, indent=2)}"
    )

    payload = {
        "model": MODEL,
        "messages": [
            {"role": "user", "content": user_prompt}
        ],
        "temperature": 0.7,
        "max_tokens": 900
    }

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "http://localhost",      # ‚Üê –¥–æ–ø—É—Å—Ç–∏–º–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        "X-Title": "URBANAI ADVISOR"
    }

    try:
        response = requests.post(API_URL, headers=headers, data=json.dumps(payload), timeout=30)
    except requests.exceptions.RequestException as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}"

    if response.status_code != 200:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API ({response.status_code}): {response.text}"

    try:
        return response.json()["choices"][0]["message"]["content"].strip()
    except (KeyError, IndexError, TypeError) as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}\n–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.text}"


def main():
    print("ü§ñ URBANAI ADVISOR ‚Äî –ê–Ω–∞–ª–∏–∑ –¥–æ—Ä–æ–∂–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏")
    print("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —É—á–∞—Å—Ç–æ–∫ –õ–µ–Ω–∏–Ω—Å–∫–æ–≥–æ –ø—Ä–æ—Å–ø–µ–∫—Ç–∞ –æ—Ç –¥.50 –¥–æ –¥.100'")
    user_query = input("üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨: ")

    print("\nüìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö GeoJSON —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ 'data/'...")
    features = load_all_geojsons(DATA_DIR)

    if not features:
        print("‚ùå –í –ø–∞–ø–∫–µ 'data/' –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ GeoJSON.")
        return

    segment = find_road_segment(features, user_query)

    if not segment:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É—á–∞—Å—Ç–æ–∫ –¥–æ—Ä–æ–≥–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å—É.")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –∑–∞–ø—Ä–æ—Å–µ –µ—Å—Ç—å –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Ä–æ–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç'), –∏ —Å–µ–≥–º–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–æ—Ç –¥.50 –¥–æ –¥.100').")
        return

    print("\nüîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...\n")

    result = analyze_with_ai(user_query, segment)

    print("\nü§ñ URBANAI ADVISOR:\n")
    print(result)


if name == "main":
    main()