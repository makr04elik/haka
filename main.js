const API_URL = "https://openrouter.ai/api/v1/chat/completions";
const MODEL = "meta-llama/llama-3.2-3b-instruct:free";
const OPENROUTER_API_KEY = "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";

async function loadAllGeoJSONs() {
  try {
    const response = await fetch("data/list.json");
    if (!response.ok) throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω list.json (${response.status})`);
    const files = await response.json();

    const allFeatures = [];
    for (const file of files) {
      try {
        const res = await fetch(`data/${file}`);
        if (!res.ok) continue;
        const geojson = await res.json();
        if (geojson.type === "FeatureCollection") {
          allFeatures.push(...geojson.features);
        }
      } catch (e) {
        console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏:", file, e);
      }
    }
    return allFeatures;
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ list.json:", e);
    return [];
  }
}

async function findRoadSegmentSmart(userQuery) {
  try {
    const response = await fetch("data/list.json");
    if (!response.ok) throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω list.json (${response.status})`);
    const files = await response.json();

    const query = userQuery.toLowerCase();

    for (const file of files) {
      const res = await fetch(`data/${file}`);
      if (!res.ok) continue;

      const geojson = await res.json();
      if (geojson.type !== "FeatureCollection") continue;

      for (const f of geojson.features) {
        const p = f.properties || {};
        const st = (p.ST_NAME || "").toLowerCase();
        const cf = (p.CrossNameF || "").toLowerCase();
        const ct = (p.CrossNameT || "").toLowerCase();

        if (
          query.includes(st) ||
          query.includes(cf) ||
          query.includes(ct) ||
          (p.EdgeId && query.includes(String(p.EdgeId)))
        ) {
          console.log("‚úÖ –ù–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ:", file);
          return p;
        }
      }
    }

    return null;
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ:", e);
    return null;
  }
}


async function analyze() {
  const output = document.getElementById("output");
  const userQuery = document.getElementById("userQuery").value.trim();

  if (!userQuery) {
    output.textContent = "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.";
    return;
  }

  output.textContent = "üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ GeoJSON...\n";

  const segment = await findRoadSegmentSmart(userQuery);
if (!segment) {
  output.textContent = "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —É—á–∞—Å—Ç–æ–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å—É.";
  return;
}

  output.textContent = "üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...\n";

  const userPrompt = `
–¢—ã ‚Äî URBANAI ADVISOR, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é. 
–¢—ã –∏–¥–µ–∞–ª—å–Ω–æ –≤–ª–∞–¥–µ–µ—à—å —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º –∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏.

–ò—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ—Ä–æ–∂–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.

–°–æ—Å—Ç–∞–≤—å –æ—Ç—á—ë—Ç –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π: –∞–Ω–∞–ª–∏–∑, –ø—Ä–∏—á–∏–Ω—ã, –ø—Ä–æ–≥–Ω–æ–∑, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userQuery}

–î–∞–Ω–Ω—ã–µ –æ–± —É—á–∞—Å—Ç–∫–µ:
${JSON.stringify(segment, null, 2)}
`;

  const payload = {
    model: MODEL,
    messages: [{ role: "user", content: userPrompt }],
    temperature: 0.7,
    max_tokens: 900
  };

  try {
    const res = await fetch(API_URL, {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${OPENROUTER_API_KEY}`,
        "Content-Type": "application/json",
        "X-Title": "URBANAI-ADVISOR"
      },
      body: JSON.stringify(payload)
    });

    if (!res.ok) {
      const text = await res.text();
      output.textContent = `‚ö†Ô∏è –û—à–∏–±–∫–∞ API (${res.status}): ${text}`;
      return;
    }

    const data = await res.json();
    const content = data.choices?.[0]?.message?.content?.trim();
    output.textContent = content
      ? "ü§ñ URBANAI ADVISOR:\n\n" + content
      : "‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏.";
  } catch (err) {
    output.textContent = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: " + err.message;
  }
}
